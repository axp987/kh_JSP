# FrontController 패턴
	- 기능이 많아지면 Servlet 갯수가 많아지고 길어지는 문제가 발생하기 때문에
	모든 요청을 한 곳에 받아오고, 하나의 컨트롤러로 다시 보내주는 패턴
	
	- MVC 패턴의 메인으로 "모든 요청을 하나의 대표 컨트롤러가 처리하는 방식"
	이것은 유지보수가 매우 뛰어나고, 많은 컨트롤러 응답에 계속 객체를 생성하지 않아
	자원 활용에도 매우 좋다.
	
	- 각각의 컨트롤러에서 클라이언트의 요청을 받는게 아닌 FrontController 서블릿 하나로
	클라이언트의 요청을 받는다.
	FrontController 가 요청에 맞는 컨트롤러를 찾아서 호출함
	입구가 하나이므로 공통적인 처리가 가능 사용 가능
	
	- FrontController는 요청 객체를 처리할 수 있는 비지니스 로직을
	가진 Controller 를 호출한다.
	그 다음, FrontController는 Controller의 비지니스 로직을 수행할
	메소드를 호출함. 이 때 비지니스 로직을 수행하는 메소드의 이름이
	Controller 마다 다르다면, FrontController에서 일괄적으로
	해당 메소드를 호출할 수 없게 됨
	
	- 따라서 이와 같은 문제점을 해결하기 위해 Controller는 interface로 선언하여
	각 Controller의 비지니스 로직을 수행하는 메소드는 모두 동일한 이름의 메소드명을 갖게 됨