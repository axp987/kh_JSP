# JSP가 등장하게 된 배경
	1. Servlet의 문제점
		- 웹 프로그램의 화면 기능이 점점 복잡해지면서 서블릿의 자바 기반으로 화면 구현 시 어려움이 발생함
		- 디자이너 입장에서 화면 구현 시 자바 코드로 인해 작업이 어려움. ==> 자바에 대한 지식이 없는 경우
		- 서블릿의 비지니스 로직과 화면 구현 기능이 같이 있다 보니 개발 후 유지 관리기 어려움

	2. 해결책
		- 서블릿의 비지니스 로직과 결과를 보여주는 화면 기능을 분리하자.
		- 비지니스 로직과 화면을 분리함으로써 개발자는 비지니스 로직 구현에 집중하고, 디자이너는 화면 기능 구현에
		집중하게 됨.
		- 개발 후 재사용성과 유지관리가 훨씬 수월해지게 됨
		
		
# 서블릿에서는 자바 코드와 함께 원하는 HTML 태그를 사용해서 브라우저로 전송을 하여 화면을 구현. 
서블릿으로 화면을 구현하려면 화면에 해당하는 HTML 태그를 브라우저로 전송해 주기만 하면 브라우저가 받아서
실시간으로 구현을 해 주었음 >> 하지만 JSP는 HTML, CSS, JavaScript는 물론이고 JSP에서 제공하는 여러가지 구성요소가 화면을 구현하는데 사용이 되고 있음
그러다 보니 JSP 파일 자체를 브라우저로 전송시 브라우저는 JSP를 인식 못해서 톰켓 컨테이너를 이용하여 전송하기 전 특수한 단계를 거침

* 톰켓 컨테이너에서 JSP변환 과정
	1. 변환 단계: 컨테이너는 우선적으로 JSP 파일을 자바 파일로 변환함
	2. 컴파일 단계: 컨테이너는 변환된 파일을 클래스 파일로 변환
	3. 실행 단계: 컨테이너는 클래스 파일을 실행함(HTTP, CSS, JavaScript)를 브라우저로 전송함

# JSP 내장 객체
	- 객체를 생성하지 않고 사용할 수 있는 객체
	- 내장 객체는 JSP 페이지 내에 제공하는 특수한 레퍼런스 타입의 변수
	- JSP 페이지에서 사용하는 특수한 레퍼런스 타입의 변수가 아무런 선언과 객체 생성 없이 사용할 수 있는 이유는 JSP가 Servlet으로 변환될 때
	JSP 컨테이너(톰캣)가 자종적으로 제공을 해 주고 있기 떄문
	
# JSP 내장 객체 종류
	- pageContext: JSP 현재 페이지에 대한 정보를 저장하고 있는 객체
	- request: 웹 브라우저의 요청 정보를 저장하고 있는 객체
	- response: 웹 브라우저의 요청에 대한 응답 정보를 저장하는 객체
	- out: JSP 페이지 내 출력할 내용을 저장하는 객체
	- session: 하나의 웹 브라우저의 정보를 유지하기 위한 세션, 정보를 저장하는 객체
	- application: 웹 애플리케이션의 정보를 저장하는 객체

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ㅍ
# JSP 페이지 이동 : forward(중요), redirect 의 2가지 이동 방식

	-  웹 애플리케이션은 여러 기능을 합쳐 하나의 프로그램을 실행하는 구조로 되어 있음
	회원관리 기능, 게시판 관리 기능, 주문 관리 등에 대해 각각의 서블릿이 기능을 수행하게 되어 있음
	- 이 때 프로그램을 실행하다 보면 서블릿끼리 또는 서블릿과 JSP
	연동해서 작업을 해야한다. 예를 들면 쇼핑몰의 경우 상품 관리 서블릿에서 조회된 상품을 화면에 표시하는
	JSP 페이지는 각각 따로 존재하게 되어 있음.
	따라서 사용자가 상품 조회를 요청하면 상품 관리 서블릿은 데이터베이스에서 해당 상품에 대한 상품 정보를 조회한 후 다시 
	JSP에게 해당 상품 정보를 전달하여 상품 정보를 표시해준다. -- 매우 중요한 포인트!!
	이런 페이지의 이동은 필수이다.
		* 요청에 대한 추가 작업을 다른 서블릿에 수행하게 함
		* 요청에 포함된 정보를 다른 서블릿이나 JSP와 공유할 수 있다.
		* 요청에 정보를 포함시켜 다른 서블릿에게 전달 할 수 있음
		* 모델  2(MVC-2) 개발 시 서블릿에서 JSP 페이지로 데이터를 전달하는 용도로 사 - 아주 중요!!
		
	servlet은 컨트롤러
	1. forward 이동 방식 - 아주 중요!!!!!
		- request의 영역(scope)에 담긴 값이 유효
		- 이동된 화면이 url 창에 보이지 않는다.(사용자는 이동되었는지 알 수 없음)
		- 주로 정보(키)를 넘겨줄 때 사용(중요)
		- RequestDispathcer 객체를 사용함
			==> forward() 메소드를 이용
			형식) RequestDispath rd = request.getRequestDispathcer("이동위치");
				rd.forward(request, response);
				
		a.jsp >>>> servlet >>>> b.jsp
				  (DB in,out)
		a > servlet > b 순으로 데이터가 넘어감
				
	2. redirect 이동 방식
		- 클라이언트가 새로 페이지를 요청하는 것과 같은 방식으로 페이지가 이동이 된다.
		- 웹 브라우저에 재요청하는 방식
		- 일반적으로 변수 값을 넘겨줄 때 사용 - 중요
		- request, response 값이 유효하지 않음
		- 이동된 페이지가 url 창에 나타남
		- 형식) response.sendRedirect("이동위치");
		
		a.jsp >>>> servlet
			  <<<<		
		a.jsp >>>> b.jsp
		
		a 	> servlet 	> 	a 	> 	b 순으로 정보가 넘어감
			(데이터 손실)
	  (변수)			
	(DB in, out)
		
		
		
		
		
		
		